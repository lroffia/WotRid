{
    "parameters" : { 
    	"path":"sparql",
    	"secure_path":"secure/sparql",
		"subscribeSecurePort":9443,
		"subscribePort":9000,
		"updateSecurePort":8443, 
		"updatePort":8000,
		"host":"www.vaimee.com"
	},
    "namespaces" : { 
    	"wot":"http://www.arces.unibo.it/wot#",
		"rdf":"http://www.w3.org/1999/02/22-rdf-syntax-ns#",
		"dul":"http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#",
		"ire":"http://w3c.github.io/wot/w3c-wot-td-ire.owl#",
		"rdfs":"http://www.w3.org/1999/02/22-rdf-syntax-ns#",
		"td":"http://w3c.github.io/wot/w3c-wot-td-ontology.owl#"
	},
    "updates": {
    	"INIT_TD":{
    		"sparql":"INSERT DATA {wot:SepaProtocol rdf:type wot:CommunicationProtocol.wot:ArcesHouse rdf:type dul:PhysicalPlace.wot:ArcesHouse td:hasName \"ArcesHabitatHouse\".wot:CoordX rdf:type dul:PhysicalAttribute.wot:CoordY rdf:type dul:PhysicalAttribute.wot:JSONContent rdf:type dul:InformationObject.wot:RaspberryPi rdf:type td:Thing.wot:RaspberryPi td:hasName \"RidEmulator\".wot:RaspberryPi td:hasProperty wot:ConfigFile.wot:RaspberryPi td:hasProperty wot:PositionData.wot:RaspberryPi td:hasAction wot:UpdateConfig.wot:RaspberryPi td:hasEvent wot:PositionDataUpdated.wot:RaspberryPi dul:hasLocation wot:ArcesHouse.wot:ConfigFile rdf:type td:Property.wot:ConfigFile td:hasName \"EmulatorConfigurationsJSON\".wot:ConfigFile td:hasStability \"-1\".wot:ConfigFile td:isWritable \"true\".wot:ConfigFile td:hasValueType wot:JSONContent.wot:JSONContent dul:hasDataValue \"JSON_CONTENT\".wot:PositionData rdf:type td:Property.wot:PositionData td:hasName \"LastRFIDPosition\".wot:PositionData td:hasStability \"1000\".wot:PositionData td:isWritable \"false\".wot:PositionData td:hasValueType wot:CoordX.wot:PositionData td:hasValueType wot:CoordY.wot:CoordX dul:hasDataValue \"Unknown\".wot:CoordY dul:hasDataValue \"Unknown\".wot:UpdateConfig rdf:type td:Action.wot:UpdateConfig td:hasName \"UpdateEmulatorParameters\".wot:UpdateConfig wot:isAccessibleBy wot:SEPAProtocol.wot:UpdateConfig td:forProperty wot:ConfigFile.wot:PositionDataUpdated rdf:type td:Event.wot:PositionDataUpdated td:hasName \"PositionChanged\".wot:PositionDataUpdated td:forProperty wot:PositionData.}"
    	},
    	"POST_NEW_EVENT":{
    		"sparql":"DELETE {?event wot:hasInstance ?oldInstance. ?oldInstance rdf:type wot:EventInstance. ?oldInstance wot:hasTimeStamp ?eOldTimeStamp} INSERT {?event wot:hasInstance ?newInstance. ?newInstance rdf:type wot:EventInstance. ?newInstance wot:hasTimeStamp ?eNewTimeStamp} WHERE {?event rdf:type td:Event. OPTIONAL{?event wot:hasInstance ?oldInstance. ?oldInstance rdf:type wot:EventInstance. ?oldInstance wot:hasTimeStamp ?eOldTimeStamp}}",
    		"forcedBindings":{
    			"event":{"type":"uri","value":""},
    			"newInstance":{"type":"uri","value":""},
    			"eNewTimeStamp":{"type":"literal","value":""}
    		}
    	},
    	"POST_ACTION_REQUEST":{
    		"sparql":"DELETE {?action wot:hasInstance ?oldInstance. ?oldInstance rdf:type wot:ActionInstance. ?oldInstance wot:hasTimeStamp ?aOldTimeStamp. ?oldInstance td:hasInput ?oldInput. ?oldInput dul:hasDataValue ?oldValue} INSERT {?action wot:hasInstance ?newInstance. ?newInstance rdf:type wot:ActionInstance. ?newInstance wot:hasTimeStamp ?aNewTimeStamp. ?newInstance td:hasInput ?newInput. ?newInput dul:hasDataValue ?newValue} WHERE {?action rdf:type td:Action. OPTIONAL{?action wot:hasInstance ?oldInstance. ?oldInstance rdf:type wot:ActionInstance. ?oldInstance wot:hasTimeStamp ?aOldTimeStamp. ?oldInstance td:hasInput ?oldInput. ?oldInput dul:hasDataValue ?oldValue}}",
    		"forcedBindings":{
    			"action":{"type":"uri","value":""},
    			"newInstance":{"type":"uri","value":""},
    			"aNewTimeStamp":{"type":"literal","value":""},
    			"newInput":{"type":"uri","value":""},
    			"newValue":{"type":"literal","value":""}
    		}
    	}
    }, 
    "subscribes": {
		"GET_ALL_THINGS":{
		    "sparql":"SELECT ?s WHERE { ?s rdf:type td:Thing }"
		},
		"GET_THING_DESCRIPTION":{
			"sparql":"SELECT ?property ?pName ?pStability ?pWrite ?pValueType ?pDataValue ?event ?eName ?eProperty ?action ?aName ?aProtocol ?aProperty	?component WHERE {?thing rdf:type td:Thing. OPTIONAL {?thing td:hasProperty ?property. ?property td:hasName ?pName. ?property td:hasStability ?pStability. ?property td:isWritable ?pWrite. ?property td:hasValueType ?pValueType. ?pValueType dul:hasDataValue ?pDataValue}. OPTIONAL {?thing td:hasEvent ?event. ?event td:hasName ?eName. ?event td:forProperty ?eProperty}. OPTIONAL {?thing td:hasAction ?action. ?action td:hasName ?aName. ?action wot:isAccessibleBy ?aProtocol. ?action td:forProperty ?aProperty}. OPTIONAL {?thing wot:hasComponent ?component}}",
			"forcedBindings": {
				"thing":{"type":"uri","value":""}
			}
		},
		"SUBSCRIBE_TO_ACTION_REQUEST":{
			"sparql":"SELECT ?instance ?input ?value WHERE {?action rdf:type td:Action. ?action wot:hasInstance ?instance. ?instance rdf:type wot:ActionInstance. ?instance td:hasInput ?input. ?input dul:hasDataValue ?value}",
			"forcedBindings": {
				"action":{"type":"uri","value":""}
			}
		},
		"SUBSCRIBE_TO_ACTION_OUTPUT":{
			"sparql":"SELECT ?instance ?timeStamp ?aOutput ?outputValue WHERE {?action wot:hasInstance ?instance. ?instance rdf:type wot:ActionInstance. ?instance wot:hasTimeStamp ?timeStamp. ?instance td:hasOutput ?aOutput. ?aOutput dul:hasDataValue ?outputValue}",
			"forcedBindings":{
				"action":{"type":"uri","value":""}
			}
		}
    }
}	